" -- Default settings ----------------------------------------------------------

" default editor
set vicmd=nvim

" let vifm perfom sys opeartion on its own instead of system cmd like cp etc
set syscalls

" trash dir, do not edit this!!
set trash

" stored dir history
set history=100

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks"). or novimhelp
set vimhelp

" If you would like to run an executable file when you press return on the file name set this.
set norunexec

" color scheme (see $HOME/.config/vifm/colors)
colorscheme Onedark

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt=%d/%m\ %H:%M

" Show list of matches on tab completion in command-line mode (like vim wildmenu)
set wildmenu

" Display completions in a form of popup with descriptions of the matches(vim popup)
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
set slowfs=curlftpfs

" Set custom status line look
set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

" Default display as miller mode
set millerview
set milleroptions=lsize:1,csize:3

" Case insensitve path completion
set caseoptions=p

" Use ripgrep instead of grep
set grepprg='rg --column --line-number --no-heading --smart-case %i %a %s'

" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" -- Bookmarks -----------------------------------------------------------------

" :mark mark /full/directory/path [filename]
mark h ~/ Programming
mark w ~/Programming/web
mark d ~/Downloads/
mark s ~/Programming/scripts shell
mark c ~/.config/
mark a ~/Programming/aws
mark t ~/Documents/TempScreenShot

" -- Custom Commands -----------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff nvim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! take :mkdir %a | cd %a
command! reload :write | restart

" dump-cli
command! dumpput :!!dump --put --recursive --confirm %f
command! dumpundo :!!dump --undo --confirm
command! dumpselect :!!dump --undo --select --local --confirm

" fzf file
command! fzf : let $FZF_RES = term('fzf --preview "head -50 {}" 2>&0')
            \| if $FZF_RES != ''
            \|     goto $FZF_RES
            \| endif

" fzf dir
command! fzd : let $FZF_RES = term('fd --type d | fzf --preview "tree -L 1 -C --dirsfirst {}" 2> /dev/tty')
            \| if $FZF_RES != ''
            \|     cd $FZF_RES
            \| endif

" fzf marks
command! fm : let $FZF_RES = term('exebookmark 2> /dev/tty')
            \| if $FZF_RES != ''
            \|     cd $FZF_RES
            \| endif

" -- File actions --------------------------------------------------------------

" view is for preview
" type is for open method

" Pdf
filetype *.pdf
       \ {Open in Preview}
       \ open -a Preview.app,
       \ {Open in Skim}
       \ open -a Skim.app,
fileviewer *.pdf echo '----- File Type Classification -----' && file --dereference --brief -- %c

" PostScript
filetype *.ps,*.eps open -a Preview.app

" Djvu
filetype *.djvu open -a MacDjView.app

" Audio
filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ {Play using MPlayerX}
       \ open -a MPlayerX.app,
       \ {Open in iTunes}
       \ open -a iTunes.app,
       \ {Open in QuickTime Player}
       \ open -a QuickTime\ Player.app,
fileviewer *.mp3,*.flac,*.wav,*.m4a,*.wma,*.ape,*.ac3 echo '----- File Type Classification -----' && file --dereference --brief -- %c

" Video
filetype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
        \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
        \*.as[fx]
       \ {Open in VLC}
       \ open -a VLC.app,
       \ {Open in QuickTime Player}
       \ open -a QuickTime\ Player.app,
       \ {Open in MPlayerX}
       \ open -a MPlayerX.app,
fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]
          \ echo '----- File Type Classification -----' && file --dereference --brief -- %c

" Web
filetype *.html,*.htm
       \ {Open in nvim}
       \ nvim,
       \ {Open in Firefox}
       \ open -a Firefox\ Developer\ edition.app,
       \ {Open in Safari}
       \ open -a Safari.app,
       \ {Open in Chrome}
       \ open -a Google\ Chrome.app,
       \ {Open in vim}
       \ vim,

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" Image
filetype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,
       \ open -a Preview.app,
fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,*.ico
         \ echo '----- File Type Classification -----' && file --dereference --brief -- %c

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" Torrent
filetype *.torrent open -a Transmission.app
fileviewer *.torrent dumptorrent -v %c

" Extract zip files
filetype *.zip unzip %f
fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c

" Extract tar archives
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz tar -xf %f
fileviewer *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz tar -tf %f

" Extract .bz2 archives
filetype *.bz2 bzip2 -d %f

" Extract .gz files
filetype *.gz gunzip %f

" Mount .dmg archives
filetype *.dmg open

" Mount disk .img
filetype *.img open

" Open .pkg binaries
filetype *.pkg open

" Office files
filetype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt open -a LibreOffice.app
fileviewer *.doc,*.docx,*.odt,*.xls,*.xlsx,*.odp,*.pptx,*.ppt echo '----- File Type Classification -----' && file --dereference --brief -- %c

" all unknown files are opened through vicmd
" *.js,*.json etc...

" Normal dirs
fileview */ tree %c -L 1 -C --dirsfirst
" Hidden dirs  
fileview .*/ tree %c -L 1 -C --dirsfirst
" .. Parent dir
fileview ../ tree %c -L 1 -C --dirsfirst

" -- Icons ---------------------------------------------------------------------

" file types
set classify=' :dir:/, :exe:, :reg:, :link:'

" special dir icons
set classify+=' ::../::,
             \  ::.git/,,*.git/,,.cfg/::,
             \ ﮛ ::Programming/::,
             \  ::.config/::,
             \  ::Pictures/,,wall-paper/,,TempScreenShot/::,
             \  ::Downloads/::,
             \  ::Documents/::,
             \  ::node_modules/::/'

" various file names
set classify+=' ::*.7z,,*.ace,,*.arj,,*.bz2,,*.cpio,,*.deb,,*.dz,,*.gz,,*.jar,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.rz,,*.tar,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2,,*.xz,,*.z,,*.zip,,*.zoo::,
             \  ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd::,
             \  ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::,
             \  ::*.avi,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv,,*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::,
             \  ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::, ::*.pptx,,*.ppt::,
             \  ::*.epub,,*.fb2,,*.djvu::,
             \  ::*.pdf::'

" programming
set classify+=' ::*.sh,,*.zsh,,*.bash,,*.bats::,
             \  ::/^copying|license$/::,
             \  ::.vimrc,,.viminfo,,*.vim,,vifm*,,init.vim::,
             \  ::.DS_Store::,
             \  ::.gitignore,,.gitconfig,,.ignore::,
             \  ::*.js::,
             \  ::*.yml,,*.yaml,,.*.yml,,.*.yaml::,
             \ ﬥ ::*.json::,
             \  ::*.md::,
             \  ::*.css::,
             \  ::*.jsx::,
             \  ::*.htm,,*.html,,**.[sx]html,,*.xml::,
             \  ::*.py::,
             \  ::*.[hc]pp,,*.[hc]::,
             \  ::Dockerfile,,docker-compose.yml::,
             \  ::*.ts::,'

" -- Mappings ------------------------------------------------------------------

" Start shell in current directory
nnoremap s :shell<cr>
" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Yank current directory path into the clipboard
nnoremap yd :!printf %d | pbcopy<cr>
" Yank current file path into the clipboard
nnoremap yf :!printf %c:p | pbcopy<cr>

" goto current directory outside vifm
nnoremap gw :cd $PWD<cr>

" map for fzf commands
nnoremap <C-p> :fzf<cr>
nnoremap <C-n> :fzd<cr>
nnoremap <C-g> :fm<cr>

" q to quite
nnoremap q :q<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" unbind arrow keys
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>

" mkdir short cut
nnoremap o :mkdir<space>
" touch short cut
nnoremap x :touch<space>

" go to project root
nnoremap \r :cd $PWD<cr>
" move file from one pane to another
nnoremap \m :move<cr>
vnoremap \m :move<cr>
" sync pane short cut
nnoremap \s :sync<cr>
" unhighlight searched results
nnoremap \n ::nohlsearch<cr>
" Toggle wrap setting on ,w key
nnoremap \w :set wrap!<cr>
" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap \c :write | edit $MYVIFMRC | restart<cr>

" switch tabs
nnoremap \1 :tabn 1<cr>
nnoremap \2 :tabn 2<cr>

" matach vim to perfom toggle of vifm
nnoremap <C-b> :q<cr>

" dump-cli
nnoremap dp :dumpput<cr>
nnoremap du :dumpundo<cr>
nnoremap ds :dumpselect<cr>
